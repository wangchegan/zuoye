#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/twist.hpp"

class TurtleCircle : public rclcpp::Node {
public:
    TurtleCircle()
        : Node("turtle_circle") {
        publisher_ = this->create_publisher<geometry_msgs::msg::Twist>("turtle1/cmd_vel", 10);

        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(100),
            std::bind(&TurtleCircle::timer_callback, this));
    }

private:
    void timer_callback() {
        auto msg = geometry_msgs::msg::Twist();
        msg.linear.x = 1.0; 
        msg.angular.z = 1.0; 
        publisher_->publish(msg);
    }

    rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
};

int main(int argc, char *argv[]) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<TurtleCircle>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
